name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Only trigger on push to main branch

jobs:
  phpunit:
    runs-on: ubuntu-latest
    container:
      image: php:8.1-cli  # Use PHP 8.1 container

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 33306:3306  # Exposing port 33306 for MySQL
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Install System Dependencies
        run: |
          apt-get update
          apt-get install -y libpq-dev libonig-dev zip unzip git

      - name: Install PHP Extensions
        run: |
          apt-get update
          apt-get install -y libmysqlclient-dev
          docker-php-ext-install pdo pdo_mysql  # Manually install PHP extensions

      - name: Install Composer Dependencies
        run: |
          curl -sS https://getcomposer.org/installer | php
          mv composer.phar /usr/local/bin/composer
          composer install --no-scripts --no-interaction --prefer-dist

      - name: Prepare Laravel Application
        run: |
          cp .env.ci .env
          php artisan key:generate
          php artisan migrate --force  # Run migrations

      - name: Run Testsuite
        run: ./vendor/bin/pest  # Use Pest instead of PHPUnit

  deploy:
    needs: phpunit  # Only deploy if tests pass
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /var/www/html/your_project
            git pull origin main
            composer install --no-dev --optimize-autoloader
            php artisan migrate --force  # Only updates the DB, no data loss
            php artisan config:clear
            php artisan cache:clear
            php artisan route:cache
            php artisan view:cache
            sudo systemctl restart apache2  # Or restart Nginx
